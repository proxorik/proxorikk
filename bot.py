#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import logging
import telebot
from telebot import types
from dotenv import load_dotenv
import threading
import tempfile
import time
import requests
import sys
import traceback
from datetime import datetime
import telebot
from googlesearch import search
from bs4 import BeautifulSoup
import requests
from openai_helper import generate_ai_response, analyze_image, analyze_video
from conversation_handler import get_conversation_history, add_to_conversation, clear_conversation
from user_preferences import update_user_preferences
from keep_alive import keep_alive
from g4f.client import Client

client = Client()
response = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[{"role": "user", "content": "Hello"}],
    web_search=False
)
print(response.choices[0].message.content)

# Load environment variables
load_dotenv()

# Configure detailed logging
log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, f"bot_{datetime.now().strftime('%Y%m%d')}.log")

# Enable logging to both console and file
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Get environment variables
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    logger.error("Please set the TELEGRAM_TOKEN environment variable.")
    exit(1)

# Define exception handler for uncaught exceptions
def handle_exception(exc_type, exc_value, exc_traceback):
    if issubclass(exc_type, KeyboardInterrupt):
        # Default behavior for KeyboardInterrupt
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return
    
    # Log the error details
    logger.critical("Uncaught exception:", exc_info=(exc_type, exc_value, exc_traceback))
    logger.critical(f"Exception type: {exc_type}")
    logger.critical(f"Exception value: {exc_value}")
    logger.critical(f"Traceback: {''.join(traceback.format_tb(exc_traceback))}")

# Set the exception hook
sys.excepthook = handle_exception

# Initialize the bot with appropriate configuration
bot = telebot.TeleBot(TELEGRAM_TOKEN, threaded=True, num_threads=5)

# Handle /start command
@bot.message_handler(commands=["start"])
def start_command(message):
    """Send a message when the command /start is issued."""
    user_first_name = message.from_user.first_name
    
    # Create inline keyboard
    markup = types.InlineKeyboardMarkup(row_width=2)
    help_button = types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
    clear_button = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="clear_chat")
    markup.add(help_button, clear_button)
    
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! üëã –Ø Cookie AI, —Ç–≤–æ–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –í–∞–¥–∏–º–æ–º –ü—Ä–æ—Ö–æ—Ä–µ–Ω–∫–æ! ‚ú®\n\n"
        f"–Ø –æ—á–µ–Ω—å —Ä–∞–¥ –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π! üéâ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –¥–∞–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å, —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å! üí¨\n\n"
        f"üç™ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: —è —è–≤–ª—è—é—Å—å —á–∞—Å—Ç—å—é —Ä–∞—Å—Ç—É—â–µ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä–∞—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Google Play Store –∏ App Store, –∞ —Ç–∞–∫–∂–µ –º–µ–º-–∫–æ–∏–Ω –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º Cookie AI! üöÄ",
        reply_markup=markup,
        parse_mode="HTML"
    )

# Handle /help command
@bot.message_handler(commands=["help"])
def help_command(message):
    """Send a message when the command /help is issued."""
    # Create inline keyboard
    markup = types.InlineKeyboardMarkup(row_width=1)
    clear_button = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="clear_chat")
    markup.add(clear_button)
    
    bot.send_message(
        message.chat.id,
        "üìö –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Cookie AI:\n\n"
        "- üí¨ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é —Å–≤–æ–µ–≥–æ –ò–ò-–º–æ–∑–≥–∞ üß†\n"
        "- üì∏ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, —á—Ç–æ –Ω–∞ –Ω–µ–π –≤–∏–∂—É\n"
        "- üé• –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å—ë –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä)\n"
        "- üé§ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å –∏ –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å\n"
        "- üîò –ó–∞–ø–∏—à–∏ –∫—Ä—É–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ (–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ), –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —á—Ç–æ –Ω–∞ –Ω–µ–º\n"
        "- üóëÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π /clear, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
        "- üîÑ –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞—à –¥—Ä—É–∂–µ—Å–∫–∏–π —á–∞—Ç –∑–∞–Ω–æ–≤–æ\n"
        "- ‚ùì –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É —Å–Ω–æ–≤–∞\n\n"
        "üç™ –û–±–æ –º–Ω–µ: —è Cookie AI, —Å–æ–∑–¥–∞–Ω–Ω—ã–π 15-–ª–µ—Ç–Ω–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –í–∞–¥–∏–º–æ–º –ü—Ä–æ—Ö–æ—Ä–µ–Ω–∫–æ. –°–∫–æ—Ä–æ —è –±—É–¥—É –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Google Play –∏ App Store, –∞ —Ç–∞–∫–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –≤—ã–ø—É—Å–∫ –º–µ–º-–∫–æ–∏–Ω–∞ Cookie AI! üöÄ\n\n"
        "–û —á—ë–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è? üòä",
        reply_markup=markup
    )

# Handle /clear command
@bot.message_handler(commands=["clear"])
def clear_command(message):
    """Clear conversation history when the command /clear is issued."""
    user_id = message.from_user.id
    clear_conversation(user_id)
    bot.send_message(message.chat.id, "üßπ –ì–æ—Ç–æ–≤–æ! –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞! ‚ú® –¢–µ–ø–µ—Ä—å –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –û —á—ë–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? üòä")

# –°–æ–∑–¥–∞–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
TEMP_DIR = "temp_media"
os.makedirs(TEMP_DIR, exist_ok=True)

# Handle photo messages
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    """Process and respond to photos sent by users."""
    user_id = message.from_user.id
    
    try:
        # Show the bot is processing
        bot.send_chat_action(message.chat.id, "typing")
        
        # Get caption if available
        caption = ""
        if message.caption:
            caption = message.caption
            # Update preferences based on caption
            update_user_preferences(user_id, caption)
        
        # Get the highest quality photo
        file_info = bot.get_file(message.photo[-1].file_id)
        
        # Generate a unique filename
        photo_path = os.path.join(TEMP_DIR, f"photo_{user_id}_{int(time.time())}.jpg")
        
        # Download the photo
        downloaded_file = bot.download_file(file_info.file_path)
        with open(photo_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        # Analyze the image
        custom_prompt = f"–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. {caption}" if caption else None
        analysis = analyze_image(photo_path, custom_prompt)
        
        # Add user and bot messages to conversation history
        image_desc = f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é{': ' + caption if caption else ''}]"
        add_to_conversation(user_id, "user", image_desc)
        add_to_conversation(user_id, "assistant", analysis)
        
        # Send the response
        bot.send_message(message.chat.id, analysis)
        
        # Clean up
        try:
            os.remove(photo_path)
        except:
            pass
            
    except Exception as e:
        logger.error(f"Error processing photo: {str(e)}")
        bot.send_message(
            message.chat.id,
            "üòì –û–π! –£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
        )

# Handle video messages
@bot.message_handler(content_types=['video'])
def handle_video(message):
    """Process and respond to videos sent by users."""
    user_id = message.from_user.id
    
    try:
        # Show the bot is processing
        bot.send_chat_action(message.chat.id, "typing")
        
        # Get caption if available
        caption = ""
        if message.caption:
            caption = message.caption
            # Update preferences based on caption
            update_user_preferences(user_id, caption)
        
        # Download both the video and its thumbnail
        video_path = None
        thumbnail_path = None
        
        # Get the video file itself
        try:
            video_file_info = bot.get_file(message.video.file_id)
            video_path = os.path.join(TEMP_DIR, f"video_{user_id}_{int(time.time())}.mp4")
            video_downloaded_file = bot.download_file(video_file_info.file_path)
            with open(video_path, 'wb') as new_file:
                new_file.write(video_downloaded_file)
        except Exception as e:
            logger.error(f"Error downloading video: {str(e)}")
        
        # Get video thumbnail as fallback
        try:
            if message.video.thumbnail:
                thumbnail_file_info = bot.get_file(message.video.thumbnail.file_id)
                thumbnail_path = os.path.join(TEMP_DIR, f"video_thumb_{user_id}_{int(time.time())}.jpg")
                thumbnail_downloaded_file = bot.download_file(thumbnail_file_info.file_path)
                with open(thumbnail_path, 'wb') as new_file:
                    new_file.write(thumbnail_downloaded_file)
        except Exception as e:
            logger.error(f"Error downloading thumbnail: {str(e)}")
        
        # Show the bot is still processing 
        bot.send_chat_action(message.chat.id, "typing")
        
        # Create custom prompt based on caption
        custom_prompt = None
        if caption:
            if "–∏—Å–ø—Ä–∞–≤–∏—Ç—å" in caption.lower() or "—É–ª—É—á—à–∏—Ç—å" in caption.lower() or "–ø—Ä–æ–±–ª–µ–º–∞" in caption.lower():
                custom_prompt = f"–≠—Ç–æ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –≤—ã—è–≤–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {caption}"
            else:
                custom_prompt = f"–≠—Ç–æ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ –∏ –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç: {caption}"
        # Analyze the video using the enhanced multi-frame approach
        if video_path:
            # Full video analysis with multiple frames
            analysis = analyze_video(video_path, thumbnail_path, custom_prompt, True, 5)
        elif thumbnail_path:
            # Fallback to thumbnail-only analysis
            logger.warning("Using thumbnail-only analysis due to video download failure")
            if not custom_prompt:
                custom_prompt = "–≠—Ç–æ –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ. –û–ø–∏—à–∏, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å, –∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏, –æ —á–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ."
            analysis = analyze_video(None, thumbnail_path, custom_prompt, False, 1)
        else:
            raise Exception("Failed to download both video and thumbnail")
        
        # Add user and bot messages to conversation history
        video_desc = f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ{': ' + caption if caption else ''}]"
        add_to_conversation(user_id, "user", video_desc)
        add_to_conversation(user_id, "assistant", analysis)
        
        # Send the response
        bot.send_message(message.chat.id, analysis)
        
        # Clean up
        try:
            if video_path and os.path.exists(video_path):
                os.remove(video_path)
            if thumbnail_path and os.path.exists(thumbnail_path):
                os.remove(thumbnail_path)
        except Exception as e:
            logger.error(f"Error cleaning up files: {str(e)}")
            
    except Exception as e:
        logger.error(f"Error processing video: {str(e)}")
        bot.send_message(
            message.chat.id,
            "üòì –û–π! –£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
        )

# Handle voice messages
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    """Process and respond to voice messages sent by users."""
    user_id = message.from_user.id
    
    try:
        # Show the bot is processing
        bot.send_chat_action(message.chat.id, "typing")
        
        # Get caption if available
        caption = ""
        if message.caption:
            caption = message.caption
            # Update preferences based on caption
            update_user_preferences(user_id, caption)
        
        # Get the voice file
        file_info = bot.get_file(message.voice.file_id)
        
        # Generate a unique filename
        voice_path = os.path.join(TEMP_DIR, f"voice_{user_id}_{int(time.time())}.ogg")
        
        # Download the voice file
        downloaded_file = bot.download_file(file_info.file_path)
        with open(voice_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        # Transcribe the audio
        from openai_helper import transcribe_audio
        custom_prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {caption}" if caption else None
        
        # Show the bot is typing while processing
        bot.send_chat_action(message.chat.id, "typing")
        
        # Get transcription result
        result = transcribe_audio(voice_path, custom_prompt)
        transcription = result["transcription"]
        response_prefix = result["response"]
        
        # Add transcription to conversation history
        if transcription:
            voice_desc = f"[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: \"{transcription}\"{' | ' + caption if caption else ''}]"
            add_to_conversation(user_id, "user", voice_desc)
            
            # Get conversation history for context
            conversation = get_conversation_history(user_id)
            
            # Generate AI response with user preferences
            bot.send_chat_action(message.chat.id, "typing")
            ai_response = generate_ai_response(conversation, user_id)
            
            # Add AI response to conversation history
            add_to_conversation(user_id, "assistant", ai_response)
            
            # Send the response with transcription prefix if applicable
            full_response = f"{response_prefix}{ai_response}" if response_prefix else ai_response
            bot.send_message(message.chat.id, full_response)
        else:
            # If transcription failed, send error message
            bot.send_message(
                message.chat.id,
                "üòï –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å, —á—Ç–æ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ –∏–ª–∏ –µ—Å—Ç—å —Ñ–æ–Ω–æ–≤—ã–π —à—É–º. –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º?"
            )
        
        # Clean up
        try:
            os.remove(voice_path)
        except:
            pass
            
    except Exception as e:
        logger.error(f"Error processing voice message: {str(e)}")
        bot.send_message(
            message.chat.id,
            "üòì –û–π! –£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º."
        )

# Handle video notes (–∫—Ä—É–≥–æ–≤—ã–µ –≤–∏–¥–µ–æ)
@bot.message_handler(content_types=['video_note'])
def handle_video_note(message):
    """Process and respond to video notes (circular videos) sent by users."""
    user_id = message.from_user.id
    
    try:
        # Show the bot is processing
        bot.send_chat_action(message.chat.id, "typing")
        
        # Get the video note file
        file_info = bot.get_file(message.video_note.file_id)
        
        # Generate unique filenames
        video_path = os.path.join(TEMP_DIR, f"video_note_{user_id}_{int(time.time())}.mp4")
        
        # Download the video note
        downloaded_file = bot.download_file(file_info.file_path)
        with open(video_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        # Custom prompt for video notes
        custom_prompt = "–≠—Ç–æ –∫—Ä—É–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ –∏–∑ Telegram (video note). –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, —á—Ç–æ –Ω–∞ –Ω–µ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏ –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Å–∏—Ç –æ –ø–æ–º–æ—â–∏ –∏–ª–∏ –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ —Å—É—Ç–∏."
        
        # Analyze the video with multiple frames
        analysis = analyze_video(video_path, None, custom_prompt, True, 5)
        
        # Add to conversation history
        video_desc = "[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫—Ä—É–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ]"
        add_to_conversation(user_id, "user", video_desc)
        add_to_conversation(user_id, "assistant", analysis)
        
        # Send the response
        bot.send_message(message.chat.id, analysis)
        
        # Clean up
        try:
            os.remove(video_path)
        except:
            pass
            
    except Exception as e:
        logger.error(f"Error processing video note: {str(e)}")
        bot.send_message(
            message.chat.id,
            "üòì –û–π! –£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–º."
        )

# Handle text messages
@bot.message_handler(content_types=['text'])
def handle_message(message):
    """Handle user text messages and generate AI responses."""
    user_id = message.from_user.id
    message_text = message.text
    
    # Add user message to conversation history
    add_to_conversation(user_id, "user", message_text)
    
    # Update user preferences based on the message
    update_user_preferences(user_id, message_text)
    
    # Get conversation history for context
    conversation = get_conversation_history(user_id)
    
    try:
        # Send "typing" action to show the bot is processing
        bot.send_chat_action(message.chat.id, "typing")
        
        # Generate AI response with user preferences
        ai_response = generate_ai_response(conversation, user_id)
        
        # Add AI response to conversation history
        add_to_conversation(user_id, "assistant", ai_response)
        
        # Send the response
        bot.send_message(message.chat.id, ai_response)
    
    except Exception as e:
        logger.error(f"Error generating response: {str(e)}")
        bot.send_message(
            message.chat.id,
            "üòì –û–π! –£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. ü§ñ –ú–æ–∏ —Å—Ö–µ–º—ã –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∏–ª–∏—Å—å. –ù–µ –º–æ–≥ –±—ã —Ç—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É? –ò–ª–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É. –ü—Ä–∏–Ω–æ—à—É –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üôè"
        )

# Handle callback queries from inline keyboards
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """Handle inline keyboard button callbacks."""
    # Answer the callback query to remove the "loading" state
    bot.answer_callback_query(call.id)
    
    if call.data == "help":
        # Create inline keyboard
        markup = types.InlineKeyboardMarkup(row_width=1)
        clear_button = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="clear_chat")
        markup.add(clear_button)
        
        # Edit the message with help information
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üìö –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Cookie AI:\n\n"
                "- üí¨ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é —Å–≤–æ–µ–≥–æ –ò–ò-–º–æ–∑–≥–∞ üß†\n"
                "- üì∏ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, —á—Ç–æ –Ω–∞ –Ω–µ–π –≤–∏–∂—É\n"
                "- üé• –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å—ë –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä)\n"
                "- üé§ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å –∏ –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å\n"
                "- üîò –ó–∞–ø–∏—à–∏ –∫—Ä—É–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ (–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ), –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —á—Ç–æ –Ω–∞ –Ω–µ–º\n"
                "- üóëÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π /clear, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
                "- üîÑ –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞—à –¥—Ä—É–∂–µ—Å–∫–∏–π —á–∞—Ç –∑–∞–Ω–æ–≤–æ\n"
                "- ‚ùì –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É —Å–Ω–æ–≤–∞\n\n"
                "üç™ –û–±–æ –º–Ω–µ: —è Cookie AI, —Å–æ–∑–¥–∞–Ω–Ω—ã–π 15-–ª–µ—Ç–Ω–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –í–∞–¥–∏–º–æ–º –ü—Ä–æ—Ö–æ—Ä–µ–Ω–∫–æ. –°–∫–æ—Ä–æ —è –±—É–¥—É –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Google Play –∏ App Store, –∞ —Ç–∞–∫–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –≤—ã–ø—É—Å–∫ –º–µ–º-–∫–æ–∏–Ω–∞ Cookie AI! üöÄ\n\n"
                "–û —á—ë–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è? üòä",
            reply_markup=markup
        )
    
    elif call.data == "clear_chat":
        user_id = call.from_user.id
        clear_conversation(user_id)
        bot.send_message(call.message.chat.id, "üßπ –ì–æ—Ç–æ–≤–æ! –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞! ‚ú® –¢–µ–ø–µ—Ä—å –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –û —á—ë–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? üòä")

# –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@bot.message_handler(commands=["status"])
def status_command(message):
    """Send status information to the administrator."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ –∏–º–µ—é—Ç –≤—Å–µ, –Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç–µ —Å—Ç–æ–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å
    uptime = time.time() - BOT_START_TIME
    days, remainder = divmod(uptime, 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    status_msg = (
        "ü§ñ *–°—Ç–∞—Ç—É—Å Cookie AI*\n\n"
        f"‚úÖ *–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç*\n"
        f"‚è± *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã*: {int(days)} –¥–Ω–µ–π, {int(hours)} —á–∞—Å–æ–≤, {int(minutes)} –º–∏–Ω—É—Ç\n"
        f"üß† *–ü–∞–º—è—Ç—å*: {get_memory_usage()} –ú–ë\n"
        f"üíæ *–î–∏—Å–∫*: {get_disk_usage()} –ì–ë —Å–≤–æ–±–æ–¥–Ω–æ\n"
        f"üîÑ *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤*: {RESTART_COUNT}\n"
        f"‚ö° *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è*: {last_connection_check.strftime('%Y-%m-%d %H:%M:%S')}\n"
    )
    
    bot.send_message(message.chat.id, status_msg, parse_mode="Markdown")

def get_memory_usage():
    """Get memory usage of the current process in MB."""
    try:
        import psutil
        process = psutil.Process(os.getpid())
        memory_info = process.memory_info()
        return round(memory_info.rss / (1024 * 1024), 2)  # Convert to MB
    except:
        return "–ù/–î"  # –ï—Å–ª–∏ psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

def get_disk_usage():
    """Get available disk space in GB."""
    try:
        total, used, free = shutil.disk_usage("/")
        return round(free / (1024 * 1024 * 1024), 2)  # Convert to GB
    except:
        return "–ù/–î"  # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

def check_telegram_connection():
    """Check if the connection to Telegram API is working."""
    global last_connection_check
    last_connection_check = datetime.now()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–≤—è–∑–∏
        bot_info = bot.get_me()
        logger.info(f"Connection check successful. Bot username: {bot_info.username}")
        return True
    except Exception as e:
        logger.error(f"Connection check failed: {str(e)}")
        return False

def connection_monitor():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API."""
    global RESTART_COUNT
    
    while True:
        try:
            time.sleep(CONNECTION_CHECK_INTERVAL)
            
            if not check_telegram_connection():
                logger.warning("Connection to Telegram API lost. Attempting to restart...")
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ –º—ã –º–æ–≥–ª–∏ –±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∞–º –ø—Ä–æ—Ü–µ—Å—Å
                # –ù–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–º —Å—á–µ—Ç—á–∏–∫
                RESTART_COUNT += 1
                logger.info(f"Bot restarted. Total restarts: {RESTART_COUNT}")
        except Exception as e:
            logger.error(f"Error in connection monitor: {str(e)}")

def cleanup_temp_files():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã."""
    while True:
        try:
            time.sleep(TEMP_CLEANUP_INTERVAL)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ TEMP_DIR
            now = time.time()
            files = [os.path.join(TEMP_DIR, f) for f in os.listdir(TEMP_DIR)]
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
            for f in files:
                if os.path.isfile(f) and os.stat(f).st_mtime < now - 3600:
                    try:
                        os.remove(f)
                        logger.info(f"Removed old temp file: {f}")
                    except Exception as e:
                        logger.error(f"Error removing temp file {f}: {str(e)}")
        except Exception as e:
            logger.error(f"Error in temp file cleanup: {str(e)}")

def main():
    """Start the bot and background services."""
    global BOT_START_TIME, last_connection_check, RESTART_COUNT
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    BOT_START_TIME = time.time()
    last_connection_check = datetime.now()
    RESTART_COUNT = 0
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive
    logger.info("Starting keep-alive server...")
    keep_alive()  # Start the Flask server in a separate thread
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    logger.info("Starting connection monitor...")
    threading.Thread(target=connection_monitor, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    logger.info("Starting temp file cleanup service...")
    threading.Thread(target=cleanup_temp_files, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    logger.info("Starting bot...")
    while True:
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º –ø–æ–ª–ª–∏–Ω–≥–æ–º
            bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(f"Bot polling encountered an error: {str(e)}")
            logger.error("Restarting bot in 10 seconds...")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
            RESTART_COUNT += 1
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            time.sleep(10)
            logger.info(f"Restarting bot... (Restart count: {RESTART_COUNT})")
        else:
            # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            break

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
BOT_START_TIME = time.time()
RESTART_COUNT = 0
CONNECTION_CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
TEMP_CLEANUP_INTERVAL = 3600  # 1 —á–∞—Å
last_connection_check = datetime.now()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
import shutil  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ

if __name__ == "__main__":
    main()
